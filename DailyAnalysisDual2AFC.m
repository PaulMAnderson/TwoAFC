function [PT] = DailyAnalysisDual2AFC(varargin)
%      SYNTAX
%      [SessionData] = DailyAnalysisDual2AFC 
%      [SessionData] = DailyAnalysisDual2AFC('Conversion.mat',... 
%                          'SessionData.mat', 'ParamSelect', 'on')
%       
%      DESCRIPTION
%      DailyAnalysisDual2AFC plots and analyses animal behaviour from Bpod 
%      SessionData in confidence task
%      DailyAnalysisDual2AFC('ParamSelect') sets user parameter input 'on'
%      or 'off'
%
%      Origins:
%      Written by Josh Sanders, 10/2014.
%      Modified by Paul Masset 3/2015.
%      Modified by Michael Lagler 02/2017.
%      Modified by Ben Nathanson 04/2017
%
%      TO DO :
%      1) Plot reward probability given evidence in the psychometric
%      2) Find trial conditions
%      3) Show left right percentage WT drop out
%

    %% Parse variable input arguments
    
    p = inputParser; % Create object of class 'inputParser'
    
    % Create defaults 
    DefaultParamSelect = 'off';
    ExpectedParamSelectOptions = {'on', 'off'};
    DefaultConversion = 'DefaultConversion.mat';
    DefaultSession = ''; % Default to user input
    
    % add positional arguments
    addOptional(p, 'Conversion', DefaultConversion, @(x) ischar(x)); 
    addOptional(p, 'Session', DefaultSession);
    % add name value pairs
    addParameter(p, 'ParamSelect', DefaultParamSelect,... 
        @(x) any(validatestring(x,ExpectedParamSelectOptions)));
    
    parse(p,varargin{:});
    
    %% Load and preprocess
    
    PT = Dual2AFCRicardo;
    PT = PT.SelectTrials(100:PT.PerSession.nTrials); 
    PT = PT.PerTrial;

    %% -- Plotting -- %% 
        
    % Asign handles to main figure
    Handles.FigMain = figure('Color', 'w');
    
    % Properties shared by all axes, (could also do for tabs)
    SharedAxProperties = {'LineWidth', 1, ...
        'XColor', [0.2 0.2 0.2], ...
        'YColor', [0.2 0.2 0.2] };
    
    hold on
    % consider hold off, give each figure a handle then plot at end,
    % subplot takes parent! Also name value pairs of input parser
    
    % Psychometric plot %
    Handles.Tab1 = uitab('Title','Psychometric', ...
        'BackgroundColor', 'w');
    Handles.Psychometric = axes(Handles.Tab1, ...
        SharedAxProperties{:});
    [Handles.Psychometric] = Psychometric2AFC(PT.LeftClickRate, PT.RightClickRate,...
        PT.ChoiceLeft);
    Handles.Fig1Sub1 = subplot(1,1,1);
    
    % Sampling plot condition on sampling error %
    Handles.Tab2 = uitab('Title','Sampling',...
        'BackgroundColor', 'w');
    Handles.Sampling = axes(Handles.Tab2, ...
        SharedAxProperties{:});
    Handles.Sampling = SamplingHistogram(PT.ST);
    Handles.Fig2Sub1 = subplot(1,1,1);
    
    % Veviaometric plot %
    Handles.Tab3 = uitab('Title','Veviaometric', ...
        'BackgroundColor', 'w');
    Handles.Vevaiometric = axes(Handles.Tab3, ...
        SharedAxProperties{:});
    [Handles.Vevaiometric] = Vevaiometric2AFC(PT.LeftClickRate, PT.RightClickRate,...
        PT.FeedbackTime, PT.ChoiceCorrect, PT.CatchTrial, PT.Rewarded);
    Handles.Fig3Sub1 = subplot(1,1,1);
    
    % Waiting time distribution %
    Handles.Tab4 = uitab('Title','Waiting time distribution', ...
        'BackgroundColor', 'w');
    Handles.WT_Dist = axes(Handles.Tab4, ...
        SharedAxProperties{:});
    title('Waiting time distribution');
    xlabel('Time (s)');
    ylabel('Count');
    hold on
    [Handles.WT_Dist_Correct] = histogram(PT.FeedbackTime(PT.ChoiceCorrect == 1),...
        'BinWidth',0.1,...
        'FaceColor', 'blue',...
        'EdgeColor', 'none');
    [Handles.WT_Dist_Error] = histogram(PT.FeedbackTime(PT.ChoiceCorrect == 0),...
        'BinWidth',0.1,...
        'FaceColor', 'r',...
        'EdgeColor', 'none');
    hold off
    Handles.Fig4Sub1 = subplot(1,1,1);
    
    % Updating plot %
    Handles.Tab5 = uitab('Title','Updating Psychometric', ...
        'BackgroundColor', 'w');
    Handles.UpdatingPsychometric.All = axes(Handles.Tab5, ...
         SharedAxProperties{:});
    
    NaNIdx = isnan(PT.ChoiceLeft) | isnan(PT.Rewarded);
    NoNaNLeftCLick = PT.LeftClickRate(~NaNIdx);
    NoNaRightCLick = PT.RightClickRate(~NaNIdx);
    NoNaNChoiceLeft = PT.ChoiceLeft(~NaNIdx);
    
    [Handles.UpdatingPsychometric.All] = Psychometric2AFC(NoNaNLeftCLick,...
       NoNaRightCLick,...
       NoNaNChoiceLeft,...
       'PlotNameVal', {'Color', [0.6 0.6 1], 'Visible', 'off'},...
       'ErrorBarNameVal', {'Color', [0.6 0.6 1]},...
       'FitNameVal', {'Color', [0.6 0.6 1]});
   
    PrevChoiceCorrect = PT.ChoiceLeft(~NaNIdx) & PT.Rewarded(~NaNIdx);
    PrevChoiceCorrect = logical([PrevChoiceCorrect(2:end) 0]); % shift by 1 trial
    
    [Handles.UpdatingPsychometric.Left] = Psychometric2AFC(NoNaNLeftCLick(PrevChoiceCorrect),...
      NoNaRightCLick(PrevChoiceCorrect),...
      NoNaNChoiceLeft(PrevChoiceCorrect),...
      'TxtHozShift', 0.2,...
      'PlotNameVal', {'Color', [0.6 1 0.6], 'Visible', 'off'},...
      'ErrorBarNameVal', {'Color', [0.6 1 0.6]},...
      'FitNameVal', {'Color', [0.6 1 0.6]});
  
    PrevChoiceCorrect = ~PT.ChoiceLeft(~NaNIdx) & PT.Rewarded(~NaNIdx);
    PrevChoiceCorrect = logical([PrevChoiceCorrect(2:end) 0]); % shift by 1 trial 
    
    [Handles.UpdatingPsychometric.Right] = Psychometric2AFC(NoNaNLeftCLick(PrevChoiceCorrect),...
        NoNaRightCLick(PrevChoiceCorrect),...
        NoNaNChoiceLeft(PrevChoiceCorrect),...
        'TxtHozShift', 0.4,...
        'PlotNameVal', {'Color', [1 0.6 0.6], 'Visible', 'off'},...
        'ErrorBarNameVal', {'Color', [1 0.6 0.6]},...
        'FitNameVal', {'Color', [1 0.6 0.6]});
    Handles.Fig1Sub1 = subplot(1,1,1);
           
    Handles.UpdatingPsychometric.legend = legend(...
        [Handles.UpdatingPsychometric.All.Fit,...
        Handles.UpdatingPsychometric.Left.Fit,...
        Handles.UpdatingPsychometric.Right.Fit],...
        'All Trials', 'Previous Trial Left', 'Previous Trial Right');
    set(Handles.UpdatingPsychometric.legend, 'Box', 'off',...
        'Location','southeast');
    
    Handles.Fig5Sub1 = subplot(1,1,1);

    clear NaNIdx NoNaNLeftCLick NoNaRightCLick NoNaNChoiceLeft
    
    %% User input --- Psychometric---
    
    % Toggle psychometric error bar
    Handles.Error = uicontrol('Parent', Handles.Tab1, ...
    'Style','pushbutton',...
    'String', 'Error bar',...
    'Position', [20 20 120 20],...
    'BackgroundColor','white',...
    'Callback',{@ToggleCallback,{Handles.Psychometric.ErrorBarHandle}} );

    % Toggle psychometric data
    Handles.Data = uicontrol('Parent', Handles.Tab1, ...
    'Style','pushbutton',...
    'String', 'Data',...
    'Position', [170 20 120 20],...
    'BackgroundColor','white',...
    'Callback',{@ToggleCallback,{Handles.Psychometric.DataLineHandle}} );

    % Toggle psychometric fit
    Handles.Fit = uicontrol('Parent', Handles.Tab1, ...
    'Style','pushbutton',...
    'String', 'Fit',...
    'Position', [320 20 120 20],...
    'BackgroundColor','white',...
    'Callback',{@ToggleCallback,{Handles.Psychometric.Fit}} );

    % Toggle psychometric fit
    Handles.Fit = uicontrol('Parent', Handles.Tab1, ...
    'Style','pushbutton',...
    'String', 'n Numbers',...
    'Position', [470 20 120 20],...
    'BackgroundColor','white',...
    'Callback',{@ToggleCallback,{(Handles.Psychometric.PlotText.nNumbers)}} );

    % Toggle psychometric text
    Handles.Fit = uicontrol('Parent', Handles.Tab1, ...
    'Style','pushbutton',...
    'String', 'Corner Text',...
    'Position', [620 20 120 20],...
    'BackgroundColor','white',...
    'Callback',{@ToggleCallback,{Handles.Psychometric.CornerText.nTotal,...
    Handles.Psychometric.CornerText.Slope,...
    Handles.Psychometric.CornerText.Midpoint,...
    Handles.Psychometric.CornerText.Goodness}});

    %% User input --- Vevaiometric ---
   
    % Toggle vevaiometric catch
    Handles.CorrectCatch = uicontrol('Parent', Handles.Tab3, ...
    'Style','pushbutton',...
    'String', 'Correct Catch',...
    'Position', [20 10 120 20],...
    'BackgroundColor','white',...
    'Callback',{@AllOnOffCallback,{Handles.Vevaiometric.WT_CorrectCatch_ErrorBarHandle,...
    Handles.Vevaiometric.WT_CorrectCatch_PlotHandle,...
    Handles.Vevaiometric.PlotText.CorrectCatch,...
    Handles.Vevaiometric.WT_CorrectCatch_ScatterHandle}});

    % Toggle vevaiometric correct drop-out
    Handles.Data = uicontrol('Parent', Handles.Tab3, ...
    'Style','pushbutton',...
    'String', 'Correct Drop-Out',...
    'Position', [20 30 120 20],...
    'BackgroundColor','white',...
    'Callback',{@AllOnOffCallback,{Handles.Vevaiometric.WT_CorrectDropOut_ErrorBarHandle,...
    Handles.Vevaiometric.WT_CorrectDropOut_PlotHandle,...
    Handles.Vevaiometric.PlotText.CorrectDropOut,...
    Handles.Vevaiometric.WT_CorrectDropOut_ScatterHandle}});

    % Toggle vevaiometric error catch
    Handles.Fit = uicontrol('Parent', Handles.Tab3, ...
    'Style','pushbutton',...
    'String', 'Error Catch',...
    'Position', [170 10 120 20],...
    'BackgroundColor','white',...
    'Callback',{@AllOnOffCallback,{Handles.Vevaiometric.WT_ErrorCatch_ErrorBarHandle,...
    Handles.Vevaiometric.WT_ErrorCatch_PlotHandle,...
    Handles.Vevaiometric.PlotText.ErrorCatch,...
    Handles.Vevaiometric.WT_ErrorCatch_ScatterHandle}});

    % Toggle vevaiometric error
    Handles.Fit = uicontrol('Parent', Handles.Tab3, ...
    'Style','pushbutton',...
    'String', 'Error',...
    'Position', [170 30 120 20],...
    'BackgroundColor','white',...
    'Callback',{@AllOnOffCallback,{Handles.Vevaiometric.WT_Error_ErrorBarHandle,...
    Handles.Vevaiometric.WT_Error_PlotHandle,...
    Handles.Vevaiometric.PlotText.Error,...
    Handles.Vevaiometric.WT_Error_ScatterHandle}});

    % Toggle vevaiometric scatter
    Handles.Fit = uicontrol('Parent', Handles.Tab3, ...
    'Style','pushbutton',...
    'String', 'Scattered Data',...
    'Position', [320 10 120 20],...
    'BackgroundColor','white',...
    'Callback',{@AllOnOffCallback,{Handles.Vevaiometric.WT_CorrectCatch_ScatterHandle,...
    Handles.Vevaiometric.WT_CorrectDropOut_ScatterHandle,...
    Handles.Vevaiometric.WT_ErrorCatch_ScatterHandle,...
    Handles.Vevaiometric.WT_Error_ScatterHandle}});

    % Toggle vevaiometric binned data
    Handles.Fit = uicontrol('Parent', Handles.Tab3, ...
    'Style','pushbutton',...
    'String', 'Binned Data',...
    'Position', [320 30 120 20],...
    'BackgroundColor','white',...
    'Callback',{@AllOnOffCallback,{Handles.Vevaiometric.PlotText.CorrectCatch,...
    Handles.Vevaiometric.PlotText.CorrectDropOut,...
    Handles.Vevaiometric.PlotText.ErrorCatch,...
    Handles.Vevaiometric.PlotText.Error,...
    Handles.Vevaiometric.WT_CorrectCatch_PlotHandle,...
    Handles.Vevaiometric.WT_CorrectDropOut_PlotHandle,...
    Handles.Vevaiometric.WT_ErrorCatch_PlotHandle,...
    Handles.Vevaiometric.WT_Error_PlotHandle}});

    % Toggle vevaiometric error bar
    Handles.Fit = uicontrol('Parent', Handles.Tab3, ...
    'Style','pushbutton',...
    'String', 'Error Bar',...
    'Position', [320 50 120 20],...
    'BackgroundColor','white',...
    'Callback',{@AllOnOffCallback,{Handles.Vevaiometric.WT_CorrectCatch_ErrorBarHandle,...
    Handles.Vevaiometric.WT_CorrectDropOut_ErrorBarHandle,...
    Handles.Vevaiometric.WT_ErrorCatch_ErrorBarHandle,...
    Handles.Vevaiometric.WT_Error_ErrorBarHandle}});

    % Toggle vevaiometric text
    Handles.Fit = uicontrol('Parent', Handles.Tab3, ...
    'Style','pushbutton',...
    'String', 'Corner Text',...
    'Position', [470 10 120 20],...
    'BackgroundColor','white',...
    'Callback',{@AllOnOffCallback,{Handles.Vevaiometric.PlotText.CorrectCatch,...
    Handles.Vevaiometric.PlotText.CorrectDropOut,...
    Handles.Vevaiometric.PlotText.ErrorCatch,...
    Handles.Vevaiometric.PlotText.Error,...
    Handles.Vevaiometric.CornerText}});

end