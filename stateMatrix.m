function sma = stateMatrix(iTrial) %RMM
global BpodSystem
global TaskParameters

%stateMatrix from Dual2AFCRicardo


%% Define ports
LeftPort      = floor(mod(TaskParameters.GUI.Ports_LMR/100,10));
CenterPort    = floor(mod(TaskParameters.GUI.Ports_LMR/10,10));
RightPort     = mod(TaskParameters.GUI.Ports_LMR,10);
LeftPortOut   = strcat('Port',num2str(LeftPort),'Out');
CenterPortOut = strcat('Port',num2str(CenterPort),'Out');
RightPortOut  = strcat('Port',num2str(RightPort),'Out');
LeftPortIn    = strcat('Port',num2str(LeftPort),'In');
CenterPortIn  = strcat('Port',num2str(CenterPort),'In');
RightPortIn   = strcat('Port',num2str(RightPort),'In');

LeftPortLED   = strcat('PWM',num2str(LeftPort));
CenterPortLED = strcat('PWM',num2str(CenterPort));
RightPortLED  = strcat('PWM',num2str(RightPort));

LeftValve = 2^(LeftPort-1);
RightValve = 2^(RightPort-1);

LeftValveTime  = GetValveTimes(BpodSystem.Data.Custom.RewardMagnitude(iTrial,1), LeftPort);
RightValveTime  = GetValveTimes(BpodSystem.Data.Custom.RewardMagnitude(iTrial,2), RightPort);

LeftRewarded = BpodSystem.Data.Custom.MoreLeftClicks(iTrial);
if isnan(LeftRewarded)
    LeftRewarded = rand(1,1)<0.5;
end

if LeftRewarded == 1
    leftPokeAction  = 'rewarded_Lin';
    leftTimer       = 1;    
    rightPokeAction = 'unrewarded_Rin';
    rightTimer      = 2;
elseif LeftRewarded == 0
    leftPokeAction  = 'unrewarded_Lin';
    leftTimer       = 2;
    rightPokeAction = 'rewarded_Rin';
    rightTimer      = 1;
else
    error('Bpod:Olf2AFC:unknownStim','Undefined stimulus');
end

if BpodSystem.Data.Custom.CatchTrial(iTrial)
    RewardDelayCorrect = 20; 
else
    RewardDelayCorrect = TaskParameters.GUI.RewardDelay;
end

% Reward Delay Errors wiil always be the max (20s) 
% We never want to let the animal know they had an error before they leave
RewardDelayError = 20;

% Here we set a soft code to indicate if the animal made a wrong choice
if TaskParameters.GUI.IndicateError
    errorSoftCode = 12;
else % 0 means do nothing
    errorSoftCode = 0;
end

% Just for completness we have the sampling dropout softcodes set here
% Currently there is nothing to be done with them
brokeFixSoftCode = 11; % White noise burst
earlyDropOutSoftCode = 11; % White noise burst


% % wire output depending on trial difficulty 
% evidence = abs(BpodSystem.Data.Custom.AuditoryOmega(iTrial)-0.5);
% binned_omega = discretize(evidence, linspace(0,1,20)); 

% List of wire states
wire_stimulusDelivery = 1;
wire_choseCorrect     = 2;
wire_choseIncorrect   = 3;
wire_rewardDelivery   = 4;
wire_timeout          = 5;

%% Build state matrix
sma = NewStateMatrix();
% The 'rewarded' timer
sma = SetGlobalTimer(sma,1,RewardDelayCorrect);
% The 'unrewarded' timer
sma = SetGlobalTimer(sma,2,RewardDelayError);
    
% Start each trial with a binary encoding of trial number
% 'Barcode' like TTL pulse with high and low pulses
% 1 ms high = 0, 2 ms = 1 etc.

TrialDigits=dec2base(iTrial,10)-'0';
TrialDigits=[zeros(1,4-length(TrialDigits)),TrialDigits];

interDigitTime = 0.001;
for j = 1:4
    TrialDigitTime(j) = interDigitTime + interDigitTime*TrialDigits(j);
end    
% TRIALCOUNT STATE1
sma = AddState(sma,'Name','TrialCount1',...
    'Timer',TrialDigitTime(1),...
    'StateChangeConditions',{'Tup','TrialCount1KIll'},...
    'OutputActions',{'BNCState',2});

% TRIALCOUNT STATE1 KILL
sma = AddState(sma,'Name','TrialCount1KIll',...
    'Timer',interDigitTime,...
    'StateChangeConditions',{'Tup','TrialCount2'},...
    'OutputActions',{'BNCState',0});

% TRIALCOUNT STATE2
sma = AddState(sma,'Name','TrialCount2',...
    'Timer',TrialDigitTime(2),...
    'StateChangeConditions',{'Tup','TrialCount2Kill'},...
    'OutputActions',{'BNCState',2});

% TRIALCOUNT STATE2 KILL
sma = AddState(sma,'Name','TrialCount2Kill',...
    'Timer',interDigitTime,...
    'StateChangeConditions',{'Tup','TrialCount3'},...
    'OutputActions',{'BNCState',0});

% TRIALCOUNT STATE3
sma = AddState(sma,'Name','TrialCount3',...
    'Timer',TrialDigitTime(3),...
    'StateChangeConditions',{'Tup','TrialCount3Kill'},...
    'OutputActions',{'BNCState',2});

% TRIALCOUNT STATE3 KILL
sma = AddState(sma,'Name','TrialCount3Kill',...
    'Timer',interDigitTime,...
    'StateChangeConditions',{'Tup','TrialCount4'},...
    'OutputActions',{'BNCState',0});

% TRIALCOUNT STATE4
sma = AddState(sma,'Name','TrialCount4',...
    'Timer',TrialDigitTime(4),...
    'StateChangeConditions',{'Tup','TrialCount4Kill'},...
    'OutputActions',{'BNCState',2});

% TRIALCOUNT STATE4 KILL
sma = AddState(sma,'Name','TrialCount4Kill',...
    'Timer',interDigitTime,...
    'StateChangeConditions',{'Tup','wait_Cin'},...
    'OutputActions',{'BNCState',0});

%%%%%%%%%% SAMPLING %%%%%%%%%%%%%%%%%
% Now the trial 'starts' we await a centre nose poke and sampling

sma = AddState(sma, 'Name', 'wait_Cin',...
    'Timer', 0,...
    'StateChangeConditions', {CenterPortIn, 'stay_Cin',LeftPortIn, 'leftPort_PreSample',RightPortIn,'rightPort_PreSample'},...
    'OutputActions', {CenterPortLED,255});

% Add new states that track animal nose-poking into sample ports while
% centre port is active to start a new trial
% Left
sma = AddState(sma, 'Name', 'leftPort_PreSample',...
    'Timer', 0,...
    'StateChangeConditions', {LeftPortOut, 'wait_Cin'},...
    'OutputActions', {CenterPortLED,255});
% Right
sma = AddState(sma, 'Name', 'rightPort_PreSample',...
    'Timer', 0,...
    'StateChangeConditions', {RightPortOut, 'wait_Cin'},...
    'OutputActions', {CenterPortLED,255});

% This state is the waiting period before stimulus is delivered
% Governed by the Stimulus Delay Parameter in the GUI
sma = AddState(sma, 'Name', 'stay_Cin',...
    'Timer', TaskParameters.GUI.StimDelay,...
    'StateChangeConditions', {CenterPortOut,'timeOut_BrokeFixation','Tup', 'stimulus_delivery_min'},...
    'OutputActions',{});

% This state governs the minimal stimulus delivery 
% BNCState 1 means BNC Port 1 is active - triggering pulse pal
sma = AddState(sma, 'Name', 'stimulus_delivery_min',...
    'Timer', TaskParameters.GUI.MinSampleAud,...
    'StateChangeConditions', {CenterPortOut,'early_withdrawal','Tup','stimulus_delivery'},...
    'OutputActions', {'BNCState',1, 'WireState',wire_stimulusDelivery});

% If animal withdraws prior to stimulus
sma = AddState(sma, 'Name', 'early_withdrawal',...
    'Timer',0,...
    'StateChangeConditions',{'Tup','timeOut_EarlyWithdrawal'},...
    'OutputActions',{'BNCState',0,'WireState',0});

% Further stimulus delivery past the minmum
sma = AddState(sma, 'Name', 'stimulus_delivery',...
    'Timer', TaskParameters.GUI.AuditoryStimulusTime - TaskParameters.GUI.MinSampleAud,...
    'StateChangeConditions', {CenterPortOut,'wait_Sin','Tup','wait_Sin'},...
    'OutputActions', {'BNCState',1, 'WireState',wire_stimulusDelivery});

% Wait for animal to make decision
sma = AddState(sma, 'Name', 'wait_Sin',...
    'Timer',TaskParameters.GUI.TimeToChoose,...
    'StateChangeConditions', {LeftPortIn,'start_Lin',RightPortIn,'start_Rin','Tup','missed_choice'},...
    'OutputActions',{'BNCState',0,'WireState',0,LeftPortLED,255,RightPortLED,255});

% If the animal chosses left
sma = AddState(sma, 'Name','start_Lin',...
    'Timer',0,...
    'StateChangeConditions', {'Tup',leftPokeAction},...
    'OutputActions',{'GlobalTimerTrig',leftTimer});%there are two start_Lin states to trigger each global timer separately (Bpod bug)
sma = AddState(sma, 'Name','start_Rin',...
    'Timer',0,...
    'StateChangeConditions', {'Tup',rightPokeAction},...
    'OutputActions',{'GlobalTimerTrig',rightTimer});%there are two start_Rin states to trigger each global timer separately (Bpod bug)

% If animal chooses correctly 
sma = AddState(sma, 'Name', 'rewarded_Lin',...
    'Timer', RewardDelayCorrect,...
    'StateChangeConditions', {LeftPortOut,'rewarded_Lin_grace','Tup','water_L','GlobalTimer1_End','water_L'},...
    'OutputActions', {'WireState',wire_choseCorrect});

sma = AddState(sma, 'Name', 'rewarded_Rin',...
    'Timer', RewardDelayCorrect,...
    'StateChangeConditions', {RightPortOut,'rewarded_Rin_grace','Tup','water_R','GlobalTimer1_End','water_R'},...
    'OutputActions', {'WireState',wire_choseCorrect});

% RMM - New versions of 'rewarded_Lin_grace' and 'rewarded_Rin_grace'
sma = AddState(sma, 'Name', 'rewarded_Rin_grace',... %NEW STATE
    'Timer', TaskParameters.GUI.RewardDelayGrace,...
    'StateChangeConditions',{'Tup','timeOut_SkippedReward',RightPortIn,'rewarded_Rin','GlobalTimer1_End','timeOut_SkippedReward',CenterPortIn,'timeOut_SkippedReward',LeftPortIn,'timeOut_SkippedReward'},...
    'OutputActions', {});

sma = AddState(sma, 'Name', 'rewarded_Lin_grace',... %NEW STATE
    'Timer', TaskParameters.GUI.RewardDelayGrace,...
    'StateChangeConditions',{'Tup','timeOut_SkippedReward',LeftPortIn,'rewarded_Lin','GlobalTimer1_End','timeOut_SkippedReward',CenterPortIn,'timeOut_SkippedReward',RightPortIn,'timeOut_SkippedReward'},...
    'OutputActions', {});

% Made the incorrec tchoice
sma = AddState(sma, 'Name', 'unrewarded_Lin',...
    'Timer', RewardDelayError,...
    'StateChangeConditions', {LeftPortOut,'unrewarded_Lin_grace','Tup','timeOut_Incorrect','GlobalTimer2_End','timeOut_Incorrect'},...
    'OutputActions', {'WireState',wire_choseIncorrect});

sma = AddState(sma, 'Name', 'unrewarded_Lin_grace',...
    'Timer', TaskParameters.GUI.RewardDelayGrace,...
    'StateChangeConditions',{'Tup','timeOut_Incorrect',LeftPortIn,'unrewarded_Lin','GlobalTimer2_End','timeOut_Incorrect',CenterPortIn,'timeOut_Incorrect',RightPortIn,'timeOut_Incorrect'},...
    'OutputActions', {});

sma = AddState(sma, 'Name', 'unrewarded_Rin',...
    'Timer', RewardDelayError,...
    'StateChangeConditions', {RightPortOut,'unrewarded_Rin_grace','Tup','timeOut_Incorrect','GlobalTimer2_End','timeOut_Incorrect'},...
    'OutputActions', {'WireState',wire_choseIncorrect});

sma = AddState(sma, 'Name', 'unrewarded_Rin_grace',...
    'Timer', TaskParameters.GUI.RewardDelayGrace,...
    'StateChangeConditions',{'Tup','timeOut_Incorrect',RightPortIn,'unrewarded_Rin','GlobalTimer2_End','timeOut_Incorrect',CenterPortIn,'timeOut_Incorrect',LeftPortIn,'timeOut_Incorrect'},...
    'OutputActions', {});

%%%%%%%%%%%%% RMM - Changes to implement lingersInPort states

% Water_LR states were replaced so that WireState signal continues after
% reward is offered and animal remains in the port
% Modified water_L/R states
sma = AddState(sma, 'Name', 'water_L',...
    'Timer', LeftValveTime,...
    'StateChangeConditions', {'Tup','lingersInPort_L'},... %'StateChangeConditions', {RightPortOut,'ITI'},...
    'OutputActions', {'ValveState', LeftValve, 'WireState',wire_rewardDelivery});
sma = AddState(sma, 'Name', 'water_R',... 
    'Timer', RightValveTime,...
    'StateChangeConditions', {'Tup','lingersInPort_R'},... %'StateChangeConditions', {RightPortOut,'ITI'},...
    'OutputActions', {'ValveState', RightValve, 'WireState',wire_rewardDelivery});

% New lingersInPort & lingersInPort_Grace states. Grace is required because the same logic of the grace
% period during waiting time remains valid here.
sma = AddState(sma, 'Name', 'lingersInPort_L',... 
    'Timer', 0,...
    'StateChangeConditions', {LeftPortOut,'lingersInPort_L_Grace'},... %'StateChangeConditions', {RightPortOut,'ITI'},...
    'OutputActions', {'WireState',2});
sma = AddState(sma, 'Name', 'lingersInPort_R',... 
    'Timer', 0,...
    'StateChangeConditions', {RightPortOut,'lingersInPort_R_Grace'},... %'StateChangeConditions', {RightPortOut,'ITI'},...
    'OutputActions', {'WireState',2});

sma = AddState(sma, 'Name', 'lingersInPort_L_Grace',... 
    'Timer', TaskParameters.GUI.RewardDelayGrace,...
    'StateChangeConditions', {LeftPortIn,'lingersInPort_L','Tup','ITI'},...
    'OutputActions', {});
sma = AddState(sma, 'Name', 'lingersInPort_R_Grace',... 
    'Timer', TaskParameters.GUI.RewardDelayGrace,...
    'StateChangeConditions', {RightPortIn,'lingersInPort_R','Tup','ITI'},...
    'OutputActions', {});

%%%%%% End of changes related to lingersInPort



%%%%%%%%%%% Timeouts %%%%%%%%%%%
sma = AddState(sma, 'Name', 'timeOut_BrokeFixation',...
    'Timer',TaskParameters.GUI.TimeOutBrokeFixation,...
    'StateChangeConditions',{'Tup','ITI'},...
    'OutputActions',{'SoftCode',brokeFixSoftCode,'WireState',0,'BNCState',0});
sma = AddState(sma, 'Name', 'timeOut_EarlyWithdrawal',...
    'Timer',TaskParameters.GUI.TimeOutBrokeFixation,...
    'StateChangeConditions',{'Tup','ITI'},...
    'OutputActions',{'SoftCode',earlyDropOutSoftCode,'WireState',0,'BNCState',0});
sma = AddState(sma, 'Name', 'timeOut_Incorrect',...
    'Timer',TaskParameters.GUI.TimeOutIncorrect,...
    'StateChangeConditions',{'Tup','ITI'},...
    'OutputActions',{'SoftCode',errorSoftCode,'WireState',0,'BNCState',0});


% Skipped Reward used to trigger a 'beep' but that should only 
% be for incorrect choices
sma = AddState(sma, 'Name', 'timeOut_SkippedReward',...
    'Timer',TaskParameters.GUI.TimeOutSkippedReward,...
    'StateChangeConditions',{'Tup','ITI'},...
    'OutputActions',{'WireState',0,'BNCState',0});

sma = AddState(sma, 'Name', 'missed_choice',...
    'Timer',0,...
    'StateChangeConditions',{'Tup','ITI'},...
    'OutputActions',{'WireState',0,'BNCState',0});

sma = AddState(sma, 'Name', 'ITI',...
    'Timer',max(TaskParameters.GUI.ITI,0),...
    'StateChangeConditions',{'Tup','exit'},...
    'OutputActions',{'WireState',0,'BNCState',0}); 

% Empty example state
% sma = AddState(sma, 'Name', 'state_name',...
%     'Timer', 0,...
%     'StateChangeConditions', {},...
%     'OutputActions', {});
